<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yujie--notes</title>
  <subtitle>Reading makes a man wise.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://heyujie.xyz/"/>
  <updated>2017-10-24T15:44:58.473Z</updated>
  <id>http://heyujie.xyz/</id>
  
  <author>
    <name>Heyujie</name>
    <email>290679031@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://heyujie.xyz/2017/10/24/x84_64%E4%B8%8BLEA%E6%8C%87%E4%BB%A4%E7%AE%80%E6%9E%90/"/>
    <id>http://heyujie.xyz/2017/10/24/x84_64下LEA指令简析/</id>
    <published>2017-10-24T15:44:58.471Z</published>
    <updated>2017-10-24T15:44:58.473Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;title: x84_64下LEA指令&lt;br&gt;date: 2017-10-25 23:20:08&lt;br&gt;technology: 技术&lt;br&gt;tags:&lt;br&gt;—        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近在Linux-0.11内核，看到LEA这个指令有些不大明白，因此去查了下资料并做一点小的总结。&lt;br&gt;LEA,即load effective address加载有效地址之意，形式是从存储器读数据到寄存器，效果是将存储器的有效地址写入到目的操作数，类似于C语言的&amp;amp;取指运算符。指令LEA的作用和80x86汇编有些类似，即地址传递。&lt;br&gt;这个指令其实和MOV很像，或者说是MOV的变形吧，但两者又有区别。MOV是数据传送指令，即把数据从源操作数传到目的操作数，MOV的具体一些细节这里不做细究，这里主要探讨一下LEA。在后面举例时就能看到这两者的一些区别。&lt;br&gt;例如在x84_64环境下,以下两行效果相同:&lt;br&gt;movq %rsp, %rdi&lt;br&gt;leaq (%rsp), %rdi&lt;br&gt;这里的区别是mov指令后的源操作数没有括号，是一种直接寻址的方式，即直接把%rsp的值赋给%rdi。是的。如果是movq (%rsp), %rdi，那么就变成了间接寻址了,也就是以%rsp里面的内容作为地址，到这个地址去取值，然后赋给%rdi寄存器。&lt;br&gt;那么leaq (%rsp), %rdi呢？首先，(%rsp)是一个内存引用，这里lea指令实际上并没有引用内存地址里的内容，而是把地址直接给了%rdi。&lt;br&gt;下面分析一个很有用但同时又很难理解的用法, 例如:leal 3(%ecx, %ecx, 2), %eax&lt;br&gt;假设%ecx的值为x, 执行上面语句得到%eax=3x+3.&lt;/p&gt;
&lt;p&gt;有点奇怪吧, 一个取址指令居然可以用来做简单算术操作了? 其实理解起来也不难, 3(%ecx, %ecx, 2)这个地址的值，也就是“3x+3”这个地址中的值, 当这个值作为leal的源操作数时会被取地址, 地址是什么? 自然就是“3x+2”嘛!&lt;/p&gt;
&lt;p&gt;呵呵，也就是说，其实不管是数值还是地址，机器也都是认识这是个数，对这个数的操作，操作完了按规则放进去不就是了嘛。&lt;/p&gt;
&lt;p&gt;PS: 可能有人会问为什么不把源操作数写成5(, %edx, 3), 这个嘛, 因为这种寻址模式的比例因子只能是1, 2, 4或者8.&lt;/p&gt;
&lt;p&gt;再来一个例子：leal 0x4(%esp), %ebx,该指令的作用是，取出esp寄存器里的值，加上4，不再继续寻址，而是将得到值直接传递给%ebx；如果是其他指令，则还需进行间接寻址，再传值（例如mov）.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: x84_64下LEA指令&lt;br&gt;date: 2017-10-25 23:20:08&lt;br&gt;technology: 技术&lt;br&gt;tags:&lt;br&gt;—
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://heyujie.xyz/2017/09/05/%E7%AE%80%E6%98%93%E7%AE%97%E6%B3%951/"/>
    <id>http://heyujie.xyz/2017/09/05/简易算法1/</id>
    <published>2017-09-05T15:35:16.663Z</published>
    <updated>2017-09-05T15:36:04.033Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;title: 简易算法1&lt;br&gt;date: 2017-09-05 23:40:08&lt;br&gt;technology: 技术&lt;br&gt;tags:&lt;br&gt;—        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.数组中有一个数出现的次数超过了数组长度的一半，找出这个数。&lt;br&gt;题目来源：&lt;br&gt;牛客网：数组中出现次数超过一半的数字&lt;/p&gt;
&lt;p&gt;例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。&lt;/p&gt;
&lt;p&gt;思路一：&lt;br&gt;最原始的想法，遍历数组的同时计数。利用hashmap存储，数组中出现的数字作为key，出现次数作value。每访问数组中的一个数字，判断其是否在hashmap的key中，如在，则对应的value加1；不在，插入，对应的value值设为1 。遍历完成后，找到hashmap中最大的value值，返回对应的key即为题目中要找的数字。&lt;/p&gt;
&lt;p&gt;遍历数组的时间复杂度为O(n),hashmap中找到最大value值的时间复杂度同为O(n)，空间复杂度为O(n)。&lt;/p&gt;
&lt;p&gt;思路二：&lt;br&gt;上述解法尽管拥有较低的时间复杂度。但是当数组中存在大量不同的数字时，将会存储大量无用的数字。如果你对数组的有序无序比较警觉，很快会意识到，数组有序时，可直接输出数组中的第n/2个元素（下标从0计起），即为所求结果。这个很好理解，假设你有一长一短两把尺子，长的20cm为A，短的11cm为B。B贴着A在A的范围内移动，A的中间位置10cm处总是会被B占据。&lt;/p&gt;
&lt;p&gt;利用快排算法，时间复杂度为O(nlgn),空间开销为O(1)。&lt;/p&gt;
&lt;p&gt;思路三：&lt;br&gt;多数人都不难找出上述两种解法。继续优化只能从减少不必要操作上入手。回到刚才，从直尺的类比中得到启发，全数组可以看作是两个子数组组成：一个数组C中只有超过长度超过一半的是数，一个数组D中由剩下的数字构成。C的长度总是比D长，每次从C和D中各取一个数字做“抵消”，直到D为空，没有任何数字；则C中剩余的数字即为所求。&lt;/p&gt;
&lt;p&gt;注意到C和D中每次取出的数字不可能相等&lt;br&gt;在实际中，我们不可能预先对数组分组。那我们试着对整个数组进行操作，每次都从全数组中选两个不同的数进行删除。最后数组中剩下的必然是要返回的数字。&lt;/p&gt;
&lt;p&gt;这样做时间复杂度是O(n),空间复杂度为O(1)。&lt;/p&gt;
&lt;p&gt;思路四：&lt;br&gt;思路三的做法会得到正确的结果，缺点是，输出结果的同时也破坏了原来的输入数组。沿着思路三改进，遍历数组的同时设计两个标记为candidate和times,candidate用来遍历数组时保存到的某个数，初始化为数组的第一个元素值。times记录次数。&lt;/p&gt;
&lt;p&gt;如果下一个数与当前的candidate中保存的数字相同，则times加1，表示它可以用来作“抵消”的次数加1。&lt;br&gt;反之，如果下一个数与当前的candidate中保存的数字不同，则做一次抵消，times减1。&lt;/p&gt;
&lt;p&gt;当times中的值为0后，表示当前的candidate可用于“抵消”的次数消耗完。保存下一个数字作为candidate，times重新设为1。&lt;br&gt;直到遍历完所有数组中所有的数字。&lt;br&gt;这样做时间复杂度是O(n),空间复杂度为O(1)，同时保留了题给的输入数组。&lt;/p&gt;
&lt;p&gt;小结：&lt;br&gt;思路一和思路二可以快速想到，思路三思路四如果没有经过一定量的训练，比较难想到这样的做法，因为这样的做法尽管简洁高效，但是它不自然，不是顺理成章的，经过了大量的逻辑加工。什么时候能想到用一加一减这样的抵消呢？对于某些可以比较明显可以区分开成两类的数据，可以试着往这方面思考。同时，简化步骤的操作要求善于设计辅助参数，如本题中的candidate和times，类似于解几何题中的辅助线。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: 简易算法1&lt;br&gt;date: 2017-09-05 23:40:08&lt;br&gt;technology: 技术&lt;br&gt;tags:&lt;br&gt;—
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://heyujie.xyz/2016/04/13/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%96%B9%E6%B3%95/"/>
    <id>http://heyujie.xyz/2016/04/13/电脑使用小方法/</id>
    <published>2016-04-13T14:50:55.536Z</published>
    <updated>2016-04-13T14:54:42.186Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;title: 几个电脑使用问题的解决小方法&lt;br&gt;date: 2016-04-13 22:45:26&lt;br&gt;categories: 日志&lt;br&gt;tags:&lt;br&gt;—        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;能上ＱＱ，而不能打开网页的解决方法（个人一般直接上4的方法1，一般问题都能解决）&lt;br&gt;1.病毒感染所致。使用360、电脑管家，金山毒霸等扫描修复&lt;br&gt;2.DNS解析出错。打开控制面板–&amp;gt;网络与Internet–&amp;gt;网络与共享中心–&amp;gt;更改适配器设置（一般左上方）–&amp;gt;以太网（这里选择你连接的网络）–&amp;gt;属性–&amp;gt;网络–&amp;gt;Internet协议版本4（TCP/IPV4）属性,勾选自动获得IP地址和自动获得DNS服务器地址&lt;br&gt;3.设置了代理服务器。访问互联网使用的是80或8080端口，如果使用了代理服务器端口也是80或8080页可能出现这种情况。解决方式是关闭代理或更换代理服务器及其端口。&lt;br&gt;4.系统文件损坏。&lt;br&gt;方法1：键盘win图标+R–&amp;gt;输入cmd 回车–&amp;gt;输入：netsh int ip reset 回车–&amp;gt;再输入：netsh winsock reset　　回车，然后重启一下就可以了&lt;br&gt;方法2：用户管理员身份进入DOS（右击桌面左下win10图标–&amp;gt;命令提示符（管理员））–&amp;gt;输入:sfc /scannow  等待系统扫描之后重启&lt;br&gt;方法3：前面同2，进入DOS命令窗口，输入：DISM.exe /Online /Cleanup-image /Scanhealth （这命令是扫描你全部系统文件并和官方系统文件对比）&lt;br&gt;DISM.exe /Online /Cleanup-image /Restorehealth （这命令把那些不同的系统文件还原成系统官方源文件）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;磁盘重要文件损坏解决方法（U盘的话如果不是很重要格式化是个不错的选择）&lt;br&gt;1.chkdsk (U盘盘符):/f，例如修复K盘就是 chkdsk k:/f&lt;br&gt;2.使用EasyRecovery Professional，百度上有这个软件的使用教程，如果磁盘无法格式化也可以修复。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Dr.com客户端登录问题&lt;br&gt;打开后无法弹出登录窗口或一直登录不上:&lt;br&gt;打开控制面板–&amp;gt;网络与Internet–&amp;gt;网络与共享中心–&amp;gt;更改适配器设置（一般左上方）–&amp;gt;以太网（这里选择你连接的网络）–&amp;gt;属性–&amp;gt;共享，取消Internet连接共享下的两个勾选&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: 几个电脑使用问题的解决小方法&lt;br&gt;date: 2016-04-13 22:45:26&lt;br&gt;categories: 日志&lt;br&gt;tags:&lt;br&gt;—
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://heyujie.xyz/2016/04/13/JAVA%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97%E7%AE%80%E5%8D%95%E8%A7%A3%E6%9E%90/"/>
    <id>http://heyujie.xyz/2016/04/13/JAVA几个关键字简单解析/</id>
    <published>2016-04-13T08:19:10.847Z</published>
    <updated>2016-04-13T13:33:37.419Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;title: JAVA的几个关键字解析&lt;br&gt;date: 2016-04-13 20:55:45&lt;br&gt;categories: JAVA&lt;br&gt;tags:&lt;br&gt;—       &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.可以用来修饰属性、方法、构造器  &lt;/p&gt;
&lt;p&gt;2.this理解为当前对象（谁调用谁就是当前对象）或当前正在创建的对象 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;*this.属性：表示当前正在创建的的对象的属性  &lt;/p&gt;
&lt;p&gt;*this(形参）：显式地调用本类中其他重载的指定构造器【用于构造器，通过该方式要求该语句必须放在构造器内部首行，一个类中有n个构造器，最多可以有（n-1）个构造器使用了this(形参)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Package&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明在源文件所在的包下，写在程序的第一行，每“.”一次，表示一层文件目录，包名需小写  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;import&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.显式导入指定包下的类和接口  &lt;/p&gt;
&lt;p&gt;2.写在包的声明和源文件之间  &lt;/p&gt;
&lt;p&gt;3.如果需要引入多个类或接口，那么就并列写出  &lt;/p&gt;
&lt;p&gt;4.如果导入的包是java.lang包下的。如：System、String、Math等，就不需要显式声明  &lt;/p&gt;
&lt;p&gt;5.例java.lang.*;表示导入lang包下的所有类和接口，不能导入lang子包下的类和接口  &lt;/p&gt;
&lt;p&gt;6.Import static 表示导入指定类的static属性和方法  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;instanceof&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;格式： 对象 instanceof 类A  &lt;/p&gt;
&lt;p&gt;判断对象是否是A的一个实例，是的话返回true，否则返回false。如果a是A的实例，那么a也是A类的父类的实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;super&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（子类默认的构造器中有super();表示父类的构造器）可用来修饰属性，方法，构造器  &lt;/p&gt;
&lt;p&gt;1.当子类与父类中有同名的属性，可以通过“super.此属性”显式的调用父类中声明的属性（若想调用子类同名的属性，“this.此属性”）  &lt;/p&gt;
&lt;p&gt;2.当子类重写父类的方法时，显式调用父类的方法“”super.此方法  &lt;/p&gt;
&lt;p&gt; 3.super(形参1，形参2…):在子类中通过调用父类的构造器修改父类的属性  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在构造器内部，“super(形参列表)”必须声明在首行！  &lt;/p&gt;
&lt;p&gt;在构造器内部，“this(形参列表)”或“super(形参列表)”只能出现一次    &lt;/p&gt;
&lt;p&gt;在构造器中，不显式的调用“this(形参列表)”或“super(形参列表)”，默认调用的是“super(形参列表)”父类空参构造器（建议在设计一个类时，尽量要提供一个空参的构造器）  &lt;/p&gt;
&lt;p&gt;*注：在子类中的构造器默认super();调用父类空参构造器，若父类中没有定义空参构造器，而父类中定义了有参构造器。则在子类构造器中将出现异常。解决办法：1.在父类中写空参构造器。2.子类构造器首行显式调用父类有参构造器（super(形参列表)）。创建一个对象，一定会调用父类的空参构造器  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;static&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;静态的，可以用来修饰属性、方法、代码块、内部类  &lt;/p&gt;
&lt;p&gt;1.static修饰属性（类变量）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1）由类创建的所有对象都共用这一属性  &lt;/p&gt;
&lt;p&gt;2）当其中一个对象对此属性进行修改，会导致其他对象对此属性的一个调用也改变。（实例变量，非static的，各个对象各自拥有一套副本）  &lt;/p&gt;
&lt;p&gt;3）类变量随着类的加载而加载，而且独一份（唯一一份）  &lt;/p&gt;
&lt;p&gt;4）静态变量可以直接通过“类.类变量”的形式来调用  &lt;/p&gt;
&lt;p&gt;5）类变量的加载是要早于对象的（而实例变量随着对象的创建而被加载的）。所以当有对象后，可以“对象.类变量”使用，但是“类.实例变量”是不行的  &lt;/p&gt;
&lt;p&gt;6）类变量存在于静态域中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.static修饰方法（类方法）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1）随着类的加载而加载，在内存中也是独一份（唯一一份）&lt;/p&gt;
&lt;p&gt;2）可以通过“类.类方法”的方式调用&lt;/p&gt;
&lt;p&gt;3）在静态方法内部可以调用静态属性或静态方法，而不能调用非静态的属性和方法。反之，非静态的可以调用静态的属性和方法&lt;/p&gt;
&lt;p&gt;注：静态的结构(static的属性、方法、代码块、内部类）的生命周期要早于非静态的结构，时回收也要晚于非静态结构。静态的方法里不可以有this和super关键字&lt;br&gt;（static的一个应用：使用静态的变量可以实现“累加”的效果，因为静态的变量独一份，各对象调用均为同一个）  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;final&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最终的，可以用来修饰类，属性，方法  &lt;/p&gt;
&lt;p&gt;1.final修饰类：这个类就不能再被继承。如：String类、StringBuffer类、System类  &lt;/p&gt;
&lt;p&gt;2.final修饰方法：不能被重写。如：Object类的gerClass();  &lt;/p&gt;
&lt;p&gt;3.fanal修饰属性：此属性就是一个常量。习惯上常量用大写字符表示（一旦初始化以后就不可以再被赋值）  &lt;/p&gt;
&lt;p&gt;此常量在哪里赋值：1）此常量不能使用默认初始化2）可以显式的赋值、代码块、构造器（不能在方法中赋值）。Static final 修饰的变量为全局常量3)可以在方法的形参传递，对对象调用时赋值，但不可以再改变。格式：fianl 类型 形参名&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: JAVA的几个关键字解析&lt;br&gt;date: 2016-04-13 20:55:45&lt;br&gt;categories: JAVA&lt;br&gt;tags:&lt;br&gt;—
    
    </summary>
    
    
  </entry>
  
</feed>
